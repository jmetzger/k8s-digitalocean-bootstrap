name: Deploy Helm Charts Only

on:
  workflow_dispatch:

concurrency:
  group: k8s-deployment-${{ github.ref }}
  cancel-in-progress: false

env:
  HELM_ROOT: helm/ingress

jobs:
  helm:
    name: Deploy Helm Charts
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Kubeconfig
      run: |
        mkdir -p terraform
        if [ -n "${{ vars.KUBECONFIG_B64 }}" ]; then
          echo "üì¶ Using stored kubeconfig from repository variables..."
          echo "${{ vars.KUBECONFIG_B64 }}" | base64 -d > terraform/kubeconfig
        else
          echo "‚ùå No stored kubeconfig found! Run full deployment first."
          exit 1
        fi
    
    - name: Setup Helm
      uses: azure/setup-helm@v4
      with:
        version: 'latest'
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'latest'
    
    - name: Deploy Ingress Controller
      run: |
        export KUBECONFIG=$GITHUB_WORKSPACE/terraform/kubeconfig
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        helm repo add jetstack https://charts.jetstack.io
        helm repo update
        helm upgrade --install ingress ingress-nginx/ingress-nginx \
          --namespace ingress-nginx --create-namespace \
          -f $HELM_ROOT/values.yaml
    
    - name: Deploy Cert-Manager
      run: |
        export KUBECONFIG=$GITHUB_WORKSPACE/terraform/kubeconfig
        helm upgrade --install cert-manager jetstack/cert-manager \
          --namespace cert-manager --create-namespace \
          -f helm/cert-manager-values.yaml
    
    - name: Wait for LoadBalancer and Create DNS Record
      run: |
        export KUBECONFIG=$GITHUB_WORKSPACE/terraform/kubeconfig
        echo "Warte auf LoadBalancer-IP..."
        
        # Wait for LoadBalancer IP (max 5 minutes)
        timeout=300
        while [ $timeout -gt 0 ]; do
          LB_IP=$(kubectl get svc ingress-ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null)
          if [ -n "$LB_IP" ] && [ "$LB_IP" != "null" ]; then
            echo "LoadBalancer IP: $LB_IP"
            break
          fi
          echo "Waiting for LoadBalancer IP... ($timeout seconds remaining)"
          sleep 10
          timeout=$((timeout-10))
        done
        
        if [ -z "$LB_IP" ] || [ "$LB_IP" = "null" ]; then
          echo "Error: LoadBalancer IP not available after timeout"
          exit 1
        fi
        
        echo "üîç Pr√ºfe ob Domain app.t3isp.de existiert..."
        DOMAIN_CHECK=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" \
          "https://api.digitalocean.com/v2/domains/app.t3isp.de")
        
        if [ "$DOMAIN_CHECK" = "404" ]; then
          echo "‚ö†Ô∏è Domain app.t3isp.de existiert nicht, erstelle sie..."
          DOMAIN_CREATE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" \
            -d "{\"name\":\"app.t3isp.de\"}" \
            "https://api.digitalocean.com/v2/domains")
          
          DOMAIN_STATUS=$(echo $DOMAIN_CREATE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          if [ "$DOMAIN_STATUS" = "201" ]; then
            echo "‚úÖ Domain app.t3isp.de erfolgreich erstellt"
            echo "üìã Nameserver f√ºr Delegation:"
            echo $DOMAIN_CREATE | sed -e 's/HTTPSTATUS\:.*//g' | jq -r '.domain.name_servers[]?' 2>/dev/null || echo "ns1.digitalocean.com, ns2.digitalocean.com, ns3.digitalocean.com"
          else
            echo "‚ùå Fehler beim Erstellen der Domain:"
            echo $DOMAIN_CREATE | sed -e 's/HTTPSTATUS\:.*//g'
            exit 1
          fi
        else
          echo "‚úÖ Domain app.t3isp.de existiert bereits"
        fi
        
        echo "Erstelle DNS-Record f√ºr *.app.t3isp.de..."
        DNS_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" \
          -d "{\"type\":\"A\",\"name\":\"*\",\"data\":\"$LB_IP\",\"ttl\":300}" \
          "https://api.digitalocean.com/v2/domains/app.t3isp.de/records")
        
        HTTP_STATUS=$(echo $DNS_RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
        DNS_BODY=$(echo $DNS_RESPONSE | sed -e 's/HTTPSTATUS\:.*//g')
        
        if [ "$HTTP_STATUS" -eq 201 ] || [ "$HTTP_STATUS" -eq 200 ]; then
          echo "‚úÖ DNS-Record erfolgreich erstellt: $DNS_BODY"
        else
          echo "‚ùå Fehler beim Erstellen des DNS-Records!"
          echo "HTTP Status: $HTTP_STATUS"
          echo "Response: $DNS_BODY"
          exit 1
        fi
    
    - name: Deploy Test Application
      run: |
        export KUBECONFIG=$GITHUB_WORKSPACE/terraform/kubeconfig
        echo "Erstelle Testapp Namespace..."
        kubectl create namespace testapp --dry-run=client -o yaml | kubectl apply -f -
        echo "Deploye Testapp..."
        kubectl apply -f manifests/testapp/