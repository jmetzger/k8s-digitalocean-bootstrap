name: Deploy DigitalOcean Kubernetes

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      upgrade_k8s:
        description: 'Upgrade to latest Kubernetes version'
        required: false
        default: 'false'
        type: boolean

concurrency:
  group: k8s-deployment-${{ github.ref }}
  cancel-in-progress: false

permissions: write-all

env:
  TF_ROOT: terraform
  HELM_ROOT: helm/ingress

jobs:
  terraform:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    outputs:
      kubeconfig: ${{ steps.tf-output.outputs.kubeconfig }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.0
        terraform_wrapper: false
    
    - name: Terraform Init
      run: |
        cd $TF_ROOT
        terraform init
      env:
        TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Set Kubernetes Version
      run: |
        cd $TF_ROOT
        # Install doctl
        curl -sL https://github.com/digitalocean/doctl/releases/download/v1.104.0/doctl-1.104.0-linux-amd64.tar.gz | tar -xzv
        sudo mv doctl /usr/local/bin
        doctl auth init -t ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        
        # Get available versions
        AVAILABLE_VERSIONS=$(doctl kubernetes options versions -o json | jq -r '.[].slug')
        DEFAULT_VERSION=$(grep 'default.*=' terraform/variables.tf | grep -o '"[^"]*"' | tr -d '"')
        
        if [ "${{ github.event.inputs.upgrade_k8s }}" = "true" ]; then
          echo "üîÑ Using latest Kubernetes version..."
          SELECTED_VERSION=$(echo "$AVAILABLE_VERSIONS" | head -n 1)
          echo "üì¶ Latest K8s version: $SELECTED_VERSION"
        else
          echo "üîç Checking if default version $DEFAULT_VERSION is available..."
          if echo "$AVAILABLE_VERSIONS" | grep -q "^$DEFAULT_VERSION$"; then
            echo "‚úÖ Default version $DEFAULT_VERSION is available"
            SELECTED_VERSION=$DEFAULT_VERSION
          else
            echo "‚ö†Ô∏è Default version $DEFAULT_VERSION not available"
            echo "üîÑ Finding next higher version..."
            # Extract version numbers for comparison
            DEFAULT_MAJOR=$(echo $DEFAULT_VERSION | cut -d'.' -f1)
            DEFAULT_MINOR=$(echo $DEFAULT_VERSION | cut -d'.' -f2)
            DEFAULT_PATCH=$(echo $DEFAULT_VERSION | cut -d'.' -f3 | cut -d'-' -f1)
            
            SELECTED_VERSION=""
            while IFS= read -r version; do
              V_MAJOR=$(echo $version | cut -d'.' -f1)
              V_MINOR=$(echo $version | cut -d'.' -f2)  
              V_PATCH=$(echo $version | cut -d'.' -f3 | cut -d'-' -f1)
              
              # Check if version is higher or equal
              if [ "$V_MAJOR" -gt "$DEFAULT_MAJOR" ] || \
                 ([ "$V_MAJOR" -eq "$DEFAULT_MAJOR" ] && [ "$V_MINOR" -gt "$DEFAULT_MINOR" ]) || \
                 ([ "$V_MAJOR" -eq "$DEFAULT_MAJOR" ] && [ "$V_MINOR" -eq "$DEFAULT_MINOR" ] && [ "$V_PATCH" -ge "$DEFAULT_PATCH" ]); then
                SELECTED_VERSION=$version
                break
              fi
            done <<< "$(echo "$AVAILABLE_VERSIONS" | sort -V)"
            
            if [ -z "$SELECTED_VERSION" ]; then
              echo "‚ùå No suitable version found, using latest"
              SELECTED_VERSION=$(echo "$AVAILABLE_VERSIONS" | head -n 1)
            fi
            echo "üéØ Selected version: $SELECTED_VERSION"
          fi
        fi
        
        echo "TF_VAR_k8s_version=$SELECTED_VERSION" >> $GITHUB_ENV
        echo "üìå Using Kubernetes version: $SELECTED_VERSION"
    
    - name: Terraform Apply
      run: |
        cd $TF_ROOT
        if ! terraform apply -auto-approve; then
          echo "‚ö†Ô∏è Terraform apply failed, checking if cluster already exists..."
          CLUSTER_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" \
            "https://api.digitalocean.com/v2/kubernetes/clusters" | \
            jq -r '.kubernetes_clusters[] | select(.name=="gitlab-cluster") | .id')
          
          if [ -n "$CLUSTER_ID" ] && [ "$CLUSTER_ID" != "null" ]; then
            echo "üì• Found existing cluster with ID: $CLUSTER_ID"
            echo "üîÑ Importing cluster into Terraform state..."
            terraform import digitalocean_kubernetes_cluster.main $CLUSTER_ID
            echo "‚úÖ Import successful, running terraform apply again..."
            terraform apply -auto-approve
          else
            echo "‚ùå No existing cluster found, terraform apply failed for other reasons"
            exit 1
          fi
        fi
      env:
        TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Get Kubeconfig
      id: tf-output
      run: |
        cd $TF_ROOT
        terraform output -raw kubeconfig > kubeconfig
        echo "kubeconfig<<EOF" >> $GITHUB_OUTPUT
        cat kubeconfig >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      env:
        TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Upload Kubeconfig Artifact
      uses: actions/upload-artifact@v4
      with:
        name: kubeconfig
        path: terraform/kubeconfig
        retention-days: 1
    
    - name: Store Kubeconfig as Repository Variable
      run: |
        cd $TF_ROOT
        KUBECONFIG_CONTENT=$(terraform output -raw kubeconfig | base64 -w 0)
        echo "üì¶ Storing kubeconfig as repository variable..."
        
        # Check if variable already exists (try without API version first)
        VARIABLE_EXISTS=$(curl -s -o /dev/null -w "%{http_code}" \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "${{ github.api_url }}/repos/${{ github.repository }}/actions/variables/KUBECONFIG_B64")
        
        if [ "$VARIABLE_EXISTS" = "200" ]; then
          echo "üîÑ Updating existing KUBECONFIG_B64 variable..."
          curl -s -X PATCH \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "${{ github.api_url }}/repos/${{ github.repository }}/actions/variables/KUBECONFIG_B64" \
            -d "{\"name\":\"KUBECONFIG_B64\",\"value\":\"$KUBECONFIG_CONTENT\"}" \
            || echo "‚ùå PATCH failed"
        else
          echo "üÜï Creating new KUBECONFIG_B64 variable..."
          RESPONSE=$(curl -s -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "${{ github.api_url }}/repos/${{ github.repository }}/actions/variables" \
            -d "{\"name\":\"KUBECONFIG_B64\",\"value\":\"$KUBECONFIG_CONTENT\"}")
          
          if echo "$RESPONSE" | grep -q "Resource not accessible"; then
            echo "‚ùå API Error: $RESPONSE"
            echo "‚ö†Ô∏è Falling back to artifact storage only"
          else
            echo "‚úÖ Variable created successfully"
          fi
        fi
        
        echo "‚úÖ Kubeconfig stored as KUBECONFIG_B64 variable"
      env:
        TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

  helm:
    name: Deploy Helm Charts
    runs-on: ubuntu-latest
    needs: terraform
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Kubeconfig
      run: |
        mkdir -p terraform
        if [ -n "${{ vars.KUBECONFIG_B64 }}" ]; then
          echo "üì¶ Using stored kubeconfig from repository variables..."
          echo "${{ vars.KUBECONFIG_B64 }}" | base64 -d > terraform/kubeconfig
        else
          echo "‚ö†Ô∏è No stored kubeconfig found, downloading from artifact..."
        fi
    
    - name: Download Kubeconfig (fallback)
      if: ${{ !vars.KUBECONFIG_B64 }}
      uses: actions/download-artifact@v4
      with:
        name: kubeconfig
        path: terraform/
    
    - name: Setup Helm
      uses: azure/setup-helm@v4
      with:
        version: 'latest'
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'latest'
    
    - name: Deploy Ingress Controller
      run: |
        export KUBECONFIG=$GITHUB_WORKSPACE/terraform/kubeconfig
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        helm repo add jetstack https://charts.jetstack.io
        helm repo update
        helm upgrade --install ingress ingress-nginx/ingress-nginx \
          --namespace ingress-nginx --create-namespace \
          -f $HELM_ROOT/values.yaml
    
    - name: Deploy Cert-Manager
      run: |
        export KUBECONFIG=$GITHUB_WORKSPACE/terraform/kubeconfig
        helm upgrade --install cert-manager jetstack/cert-manager \
          --namespace cert-manager --create-namespace \
          -f helm/cert-manager-values.yaml
    
    - name: Wait for LoadBalancer and Create DNS Record
      run: |
        export KUBECONFIG=$GITHUB_WORKSPACE/terraform/kubeconfig
        echo "Warte auf LoadBalancer-IP..."
        
        # Wait for LoadBalancer IP (max 5 minutes)
        timeout=300
        while [ $timeout -gt 0 ]; do
          LB_IP=$(kubectl get svc ingress-ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null)
          if [ -n "$LB_IP" ] && [ "$LB_IP" != "null" ]; then
            echo "LoadBalancer IP: $LB_IP"
            break
          fi
          echo "Waiting for LoadBalancer IP... ($timeout seconds remaining)"
          sleep 10
          timeout=$((timeout-10))
        done
        
        if [ -z "$LB_IP" ] || [ "$LB_IP" = "null" ]; then
          echo "Error: LoadBalancer IP not available after timeout"
          exit 1
        fi
        
        echo "üîç Pr√ºfe ob Domain app.t3isp.de existiert..."
        DOMAIN_CHECK=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" \
          "https://api.digitalocean.com/v2/domains/app.t3isp.de")
        
        if [ "$DOMAIN_CHECK" = "404" ]; then
          echo "‚ö†Ô∏è Domain app.t3isp.de existiert nicht, erstelle sie..."
          DOMAIN_CREATE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" \
            -d "{\"name\":\"app.t3isp.de\"}" \
            "https://api.digitalocean.com/v2/domains")
          
          DOMAIN_STATUS=$(echo $DOMAIN_CREATE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          if [ "$DOMAIN_STATUS" = "201" ]; then
            echo "‚úÖ Domain app.t3isp.de erfolgreich erstellt"
            echo "üìã Nameserver f√ºr Delegation:"
            echo $DOMAIN_CREATE | sed -e 's/HTTPSTATUS\:.*//g' | jq -r '.domain.name_servers[]?' 2>/dev/null || echo "ns1.digitalocean.com, ns2.digitalocean.com, ns3.digitalocean.com"
          else
            echo "‚ùå Fehler beim Erstellen der Domain:"
            echo $DOMAIN_CREATE | sed -e 's/HTTPSTATUS\:.*//g'
            exit 1
          fi
        else
          echo "‚úÖ Domain app.t3isp.de existiert bereits"
        fi
        
        echo "Erstelle DNS-Record f√ºr *.app.t3isp.de..."
        DNS_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" \
          -d "{\"type\":\"A\",\"name\":\"*\",\"data\":\"$LB_IP\",\"ttl\":300}" \
          "https://api.digitalocean.com/v2/domains/app.t3isp.de/records")
        
        HTTP_STATUS=$(echo $DNS_RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
        DNS_BODY=$(echo $DNS_RESPONSE | sed -e 's/HTTPSTATUS\:.*//g')
        
        if [ "$HTTP_STATUS" -eq 201 ] || [ "$HTTP_STATUS" -eq 200 ]; then
          echo "‚úÖ DNS-Record erfolgreich erstellt: $DNS_BODY"
        else
          echo "‚ùå Fehler beim Erstellen des DNS-Records!"
          echo "HTTP Status: $HTTP_STATUS"
          echo "Response: $DNS_BODY"
          exit 1
        fi
    
    - name: Deploy Test Application
      run: |
        export KUBECONFIG=$GITHUB_WORKSPACE/terraform/kubeconfig
        echo "Erstelle Testapp Namespace..."
        kubectl create namespace testapp --dry-run=client -o yaml | kubectl apply -f -
        echo "Deploye Testapp..."
        kubectl apply -f manifests/testapp/

