name: Destroy DigitalOcean Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type "DESTROY" to confirm infrastructure deletion'
        required: true
        type: string

concurrency:
  group: k8s-deployment-${{ github.ref }}
  cancel-in-progress: false

env:
  TF_ROOT: terraform

jobs:
  destroy:
    name: Destroy Infrastructure
    runs-on: ubuntu-latest
    environment: 
      name: destruction
    if: github.event.inputs.confirm_destroy == 'DESTROY'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.0
    
    - name: Set Kubernetes Version (for state consistency)
      run: |
        cd $TF_ROOT
        # Install doctl to get available versions
        curl -sL https://github.com/digitalocean/doctl/releases/download/v1.104.0/doctl-1.104.0-linux-amd64.tar.gz | tar -xzv
        sudo mv doctl /usr/local/bin
        doctl auth init -t ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        
        # Get available versions and use stored or find fallback
        AVAILABLE_VERSIONS=$(doctl kubernetes options versions -o json | jq -r '.[].slug')
        
        if [ -n "${{ vars.KUBECONFIG_B64 }}" ]; then
          echo "üì¶ Using kubeconfig to determine cluster version..."
          mkdir -p terraform
          echo "${{ vars.KUBECONFIG_B64 }}" | base64 -d > terraform/kubeconfig
          # Try to get cluster info, but don't fail if cluster is already gone
          CLUSTER_VERSION=$(kubectl version --short 2>/dev/null | grep "Server Version" | cut -d' ' -f3 | sed 's/v//' || echo "")
          if [ -n "$CLUSTER_VERSION" ]; then
            # Find matching DO version
            SELECTED_VERSION=$(echo "$AVAILABLE_VERSIONS" | grep "$CLUSTER_VERSION" | head -n 1)
          fi
        fi
        
        if [ -z "$SELECTED_VERSION" ]; then
          # Fallback to default from variables.tf
          DEFAULT_VERSION=$(grep 'default.*=' terraform/variables.tf | grep -o '"[^"]*"' | tr -d '"')
          echo "üîÑ Using default version: $DEFAULT_VERSION"
          SELECTED_VERSION=$DEFAULT_VERSION
        fi
        
        echo "TF_VAR_k8s_version=$SELECTED_VERSION" >> $GITHUB_ENV
        echo "üìå Using Kubernetes version: $SELECTED_VERSION"
    
    - name: Terraform Init
      run: |
        cd $TF_ROOT
        terraform init
      env:
        TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Show Infrastructure to be Destroyed
      run: |
        cd $TF_ROOT
        echo "üîç Infrastructure that will be DESTROYED:"
        echo "=========================================="
        terraform plan -destroy -no-color || echo "‚ö†Ô∏è Plan failed - infrastructure might already be gone"
        echo "=========================================="
      env:
        TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Destroy Infrastructure
      run: |
        cd $TF_ROOT
        echo "üí• DESTROYING infrastructure..."
        terraform destroy -auto-approve
        echo "‚úÖ Infrastructure destroyed successfully"
      env:
        TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Clean up Repository Variables
      run: |
        echo "üßπ Cleaning up stored kubeconfig..."
        curl -X DELETE \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "${{ github.api_url }}/repos/${{ github.repository }}/actions/variables/KUBECONFIG_B64" || echo "Variable already deleted or doesn't exist"
        echo "‚úÖ Cleanup completed"

  confirmation_failed:
    name: Destroy Confirmation Failed
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_destroy != 'DESTROY'
    
    steps:
    - name: Show Confirmation Error
      run: |
        echo "‚ùå DESTROY CANCELLED"
        echo "You entered: '${{ github.event.inputs.confirm_destroy }}'"
        echo "Required: 'DESTROY'"
        echo ""
        echo "To destroy infrastructure, you must type exactly: DESTROY"
        exit 1