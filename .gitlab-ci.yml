##
stages:
  - deploy
  - helm
  - destroy

variables:
  TF_ROOT: "terraform"
  HELM_ROOT: "helm/ingress"

terraform:
  image: 
    name: hashicorp/terraform:1.8
    entrypoint: [""]
  stage: deploy
  script:
    - export TF_VAR_do_token=$DIGITALOCEAN_ACCESS_TOKEN
    - cd $TF_ROOT
    - terraform init
    - |
      # Install doctl
      apk add curl jq
      curl -sL https://github.com/digitalocean/doctl/releases/download/v1.104.0/doctl-1.104.0-linux-amd64.tar.gz | tar -xzv
      mv doctl /usr/local/bin
      doctl auth init -t $DIGITALOCEAN_ACCESS_TOKEN
      
      # Get available versions
      AVAILABLE_VERSIONS=$(doctl kubernetes options versions -o json | jq -r '.[].slug')
      DEFAULT_VERSION=$(grep 'default.*=' terraform/variables.tf | grep -o '"[^"]*"' | tr -d '"')
      
      if [ "$UPGRADE_K8S" = "true" ]; then
        echo "üîÑ Using latest Kubernetes version..."
        SELECTED_VERSION=$(echo "$AVAILABLE_VERSIONS" | head -n 1)
        echo "üì¶ Latest K8s version: $SELECTED_VERSION"
      else
        echo "üîç Checking if default version $DEFAULT_VERSION is available..."
        if echo "$AVAILABLE_VERSIONS" | grep -q "^$DEFAULT_VERSION$"; then
          echo "‚úÖ Default version $DEFAULT_VERSION is available"
          SELECTED_VERSION=$DEFAULT_VERSION
        else
          echo "‚ö†Ô∏è Default version $DEFAULT_VERSION not available"
          echo "üîÑ Finding next higher version..."
          # Extract version numbers for comparison
          DEFAULT_MAJOR=$(echo $DEFAULT_VERSION | cut -d'.' -f1)
          DEFAULT_MINOR=$(echo $DEFAULT_VERSION | cut -d'.' -f2)
          DEFAULT_PATCH=$(echo $DEFAULT_VERSION | cut -d'.' -f3 | cut -d'-' -f1)
          
          SELECTED_VERSION=""
          while IFS= read -r version; do
            V_MAJOR=$(echo $version | cut -d'.' -f1)
            V_MINOR=$(echo $version | cut -d'.' -f2)  
            V_PATCH=$(echo $version | cut -d'.' -f3 | cut -d'-' -f1)
            
            # Check if version is higher or equal
            if [ "$V_MAJOR" -gt "$DEFAULT_MAJOR" ] || \
               ([ "$V_MAJOR" -eq "$DEFAULT_MAJOR" ] && [ "$V_MINOR" -gt "$DEFAULT_MINOR" ]) || \
               ([ "$V_MAJOR" -eq "$DEFAULT_MAJOR" ] && [ "$V_MINOR" -eq "$DEFAULT_MINOR" ] && [ "$V_PATCH" -ge "$DEFAULT_PATCH" ]); then
              SELECTED_VERSION=$version
              break
            fi
          done <<< "$(echo "$AVAILABLE_VERSIONS" | sort -V)"
          
          if [ -z "$SELECTED_VERSION" ]; then
            echo "‚ùå No suitable version found, using latest"
            SELECTED_VERSION=$(echo "$AVAILABLE_VERSIONS" | head -n 1)
          fi
          echo "üéØ Selected version: $SELECTED_VERSION"
        fi
      fi
      
      export TF_VAR_k8s_version=$SELECTED_VERSION
      echo "üìå Using Kubernetes version: $SELECTED_VERSION"
    - |
      if ! terraform apply -auto-approve; then
        echo "‚ö†Ô∏è Terraform apply failed, checking if cluster already exists..."
        CLUSTER_ID=$(curl -s -H "Authorization: Bearer $DIGITALOCEAN_ACCESS_TOKEN" \
          "https://api.digitalocean.com/v2/kubernetes/clusters" | \
          jq -r '.kubernetes_clusters[] | select(.name=="gitlab-cluster") | .id')
        
        if [ -n "$CLUSTER_ID" ] && [ "$CLUSTER_ID" != "null" ]; then
          echo "üì• Found existing cluster with ID: $CLUSTER_ID"
          echo "üîÑ Importing cluster into Terraform state..."
          terraform import digitalocean_kubernetes_cluster.main $CLUSTER_ID
          echo "‚úÖ Import successful, running terraform apply again..."
          terraform apply -auto-approve
        else
          echo "‚ùå No existing cluster found, terraform apply failed for other reasons"
          exit 1
        fi
      fi
    - terraform output -raw kubeconfig > kubeconfig
  artifacts:
    paths:
      - terraform/kubeconfig
    expire_in: 1 hour

upload-kubeconfig:
  image: curlimages/curl
  stage: deploy
  script:
    - echo "Uploading kubeconfig as GitLab CI/CD variable..."
    - |
      curl --request POST         --header "PRIVATE-TOKEN: $GITLAB_PAT_KUBECONFIG"         --form "key=KUBECONFIG"         --form "value=$(cat terraform/kubeconfig)"         --form "masked=true"         https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/variables
  needs: ["terraform"]

helm:
  image: 
    name: alpine/k8s:1.33.1
    entrypoint: [""]
  stage: helm
  script:
    - apk add curl bash
    - export KUBECONFIG=$CI_PROJECT_DIR/terraform/kubeconfig
    - helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
    - helm repo add jetstack https://charts.jetstack.io
    - helm repo update
    - helm upgrade --install ingress ingress-nginx/ingress-nginx --namespace ingress-nginx --create-namespace -f $HELM_ROOT/values.yaml
    - helm upgrade --install cert-manager jetstack/cert-manager --namespace cert-manager --create-namespace -f helm/cert-manager-values.yaml
    - echo "Warte auf LoadBalancer-IP..."
    - LB_IP=$(kubectl get svc ingress-ingress-nginx-controller -n ingress-nginx -o json --watch | jq -r 'select(.status.loadBalancer.ingress[0].ip != null) | .status.loadBalancer.ingress[0].ip' | head -n 1)
    - echo "LoadBalancer IP: $LB_IP"
    - echo "$LB_IP" > lb_ip.txt
    - echo "Erstelle DNS-Record f√ºr *.app.t3isp.de..."
    - |
      DNS_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST -H "Content-Type: application/json" \
        -H "Authorization: Bearer $DIGITALOCEAN_ACCESS_TOKEN" \
        -d "{\"type\":\"A\",\"name\":\"*.app\",\"data\":\"$LB_IP\",\"ttl\":300}" \
        "https://api.digitalocean.com/v2/domains/t3isp.de/records")
      HTTP_STATUS=$(echo $DNS_RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
      DNS_BODY=$(echo $DNS_RESPONSE | sed -e 's/HTTPSTATUS\:.*//g')
      if [ "$HTTP_STATUS" -eq 201 ] || [ "$HTTP_STATUS" -eq 200 ]; then
        echo "‚úÖ DNS-Record erfolgreich erstellt: $DNS_BODY"
      else
        echo "‚ùå Fehler beim Erstellen des DNS-Records!"
        echo "HTTP Status: $HTTP_STATUS"
        echo "Response: $DNS_BODY"
        exit 1
      fi
    - echo "Erstelle Testapp Namespace..."
    - kubectl create namespace testapp --dry-run=client -o yaml | kubectl apply -f -
    - echo "Deploye Testapp..."
    - kubectl apply -f manifests/testapp/
  needs: ["terraform"]

destroy:
  image: hashicorp/terraform:1.8
  stage: destroy
  script:
    - cd terraform
    - terraform init
    - terraform destroy -auto-approve
  when: manual
  only:
    - main

