name: Debug GitHub Token Permissions

on:
  workflow_dispatch:

permissions:
  contents: read
  actions: write
  metadata: read

jobs:
  debug-permissions:
    name: Test GitHub Token Permissions
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Test Repository Access
      run: |
        echo "üîç Testing repository access..."
        echo "Repository: ${{ github.repository }}"
        echo "Actor: ${{ github.actor }}"
        echo "API URL: ${{ github.api_url }}"
        echo ""
        
        echo "üìã Repository information:"
        REPO_INFO=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "${{ github.api_url }}/repos/${{ github.repository }}")
        
        echo "  Name: $(echo "$REPO_INFO" | jq -r '.name // "unknown"')"
        echo "  Owner: $(echo "$REPO_INFO" | jq -r '.owner.login // "unknown"')"
        echo "  Private: $(echo "$REPO_INFO" | jq -r '.private // "unknown"')"
        echo "  Permissions: $(echo "$REPO_INFO" | jq -r '.permissions // "none"')"
        echo ""
    
    - name: Test Variables API Access
      run: |
        echo "üß™ Testing Variables API access..."
        echo ""
        
        echo "üìñ 1. Testing READ access (list variables):"
        READ_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "${{ github.api_url }}/repos/${{ github.repository }}/actions/variables")
        
        READ_CODE=$(echo "$READ_RESPONSE" | sed -n 's/.*HTTPSTATUS:\([0-9]*\)$/\1/p')
        READ_BODY=$(echo "$READ_RESPONSE" | sed 's/HTTPSTATUS:[0-9]*$//')
        
        echo "  Status Code: $READ_CODE"
        if [ "$READ_CODE" = "200" ]; then
          echo "  ‚úÖ READ access working"
          echo "  Variables count: $(echo "$READ_BODY" | jq -r '.total_count // 0')"
        else
          echo "  ‚ùå READ access failed"
          echo "  Error: $READ_BODY"
        fi
        echo ""
        
        echo "‚úèÔ∏è 2. Testing WRITE access (create test variable):"
        TEST_VALUE="test-$(date +%s)"
        WRITE_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "${{ github.api_url }}/repos/${{ github.repository }}/actions/variables" \
          -d "{\"name\":\"TEST_VARIABLE\",\"value\":\"$TEST_VALUE\"}")
        
        WRITE_CODE=$(echo "$WRITE_RESPONSE" | sed -n 's/.*HTTPSTATUS:\([0-9]*\)$/\1/p')
        WRITE_BODY=$(echo "$WRITE_RESPONSE" | sed 's/HTTPSTATUS:[0-9]*$//')
        
        echo "  Status Code: $WRITE_CODE"
        if [ "$WRITE_CODE" = "201" ]; then
          echo "  ‚úÖ WRITE access working"
          echo "  Created: TEST_VARIABLE = $TEST_VALUE"
        else
          echo "  ‚ùå WRITE access failed"
          echo "  Error: $WRITE_BODY"
        fi
        echo ""
        
        echo "üîÑ 3. Testing UPDATE access:"
        if [ "$WRITE_CODE" = "201" ]; then
          UPDATE_VALUE="updated-$(date +%s)"
          UPDATE_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X PATCH \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "${{ github.api_url }}/repos/${{ github.repository }}/actions/variables/TEST_VARIABLE" \
            -d "{\"name\":\"TEST_VARIABLE\",\"value\":\"$UPDATE_VALUE\"}")
          
          UPDATE_CODE=$(echo "$UPDATE_RESPONSE" | sed -n 's/.*HTTPSTATUS:\([0-9]*\)$/\1/p')
          UPDATE_BODY=$(echo "$UPDATE_RESPONSE" | sed 's/HTTPSTATUS:[0-9]*$//')
          
          echo "  Status Code: $UPDATE_CODE"
          if [ "$UPDATE_CODE" = "204" ]; then
            echo "  ‚úÖ UPDATE access working"
          else
            echo "  ‚ùå UPDATE access failed"
            echo "  Error: $UPDATE_BODY"
          fi
        else
          echo "  ‚è≠Ô∏è Skipped (create failed)"
        fi
        echo ""
        
        echo "üóëÔ∏è 4. Testing DELETE access:"
        if [ "$WRITE_CODE" = "201" ]; then
          DELETE_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X DELETE \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "${{ github.api_url }}/repos/${{ github.repository }}/actions/variables/TEST_VARIABLE")
          
          DELETE_CODE=$(echo "$DELETE_RESPONSE" | sed -n 's/.*HTTPSTATUS:\([0-9]*\)$/\1/p')
          
          echo "  Status Code: $DELETE_CODE"
          if [ "$DELETE_CODE" = "204" ]; then
            echo "  ‚úÖ DELETE access working"
          else
            echo "  ‚ùå DELETE access failed"
          fi
        else
          echo "  ‚è≠Ô∏è Skipped (create failed)"
        fi
    
    - name: Test gh CLI Access
      run: |
        echo ""
        echo "üîß Testing gh CLI access..."
        echo ""
        
        export GH_TOKEN="${{ secrets.GITHUB_TOKEN }}"
        
        echo "üì¶ gh CLI version:"
        gh --version || echo "  gh CLI not available"
        echo ""
        
        echo "üîë gh auth status:"
        gh auth status || echo "  gh auth failed"
        echo ""
        
        echo "‚úèÔ∏è Testing gh variable set:"
        if gh variable set TEST_GH_VARIABLE --body "test-gh-$(date +%s)" 2>&1; then
          echo "  ‚úÖ gh variable set working"
          
          echo "üìñ Testing gh variable get:"
          if gh variable get TEST_GH_VARIABLE 2>&1; then
            echo "  ‚úÖ gh variable get working"
          else
            echo "  ‚ùå gh variable get failed"
          fi
          
          echo "üóëÔ∏è Testing gh variable delete:"
          if gh variable delete TEST_GH_VARIABLE 2>&1; then
            echo "  ‚úÖ gh variable delete working"
          else
            echo "  ‚ùå gh variable delete failed"
          fi
        else
          echo "  ‚ùå gh variable set failed"
        fi
    
    - name: Summary
      run: |
        echo ""
        echo "üìä SUMMARY"
        echo "=========="
        echo "Repository: ${{ github.repository }}"
        echo "Workflow permissions set: contents:read, actions:write"
        echo ""
        echo "Check the output above to see which operations failed."
        echo "If everything shows ‚úÖ, then KUBECONFIG_B64 storage should work."
        echo "If you see ‚ùå, that explains why the deploy workflow fails."