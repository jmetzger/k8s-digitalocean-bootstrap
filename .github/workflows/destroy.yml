name: Destroy DigitalOcean Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type "DESTROY" to confirm infrastructure deletion'
        required: true
        type: string

concurrency:
  group: k8s-deployment-${{ github.ref }}
  cancel-in-progress: false

env:
  TF_ROOT: terraform

jobs:
  destroy:
    name: Destroy Infrastructure
    runs-on: ubuntu-latest
    environment: 
      name: destruction
    if: github.event.inputs.confirm_destroy == 'DESTROY'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.0
    
    - name: Set Kubernetes Version (for state consistency)
      run: |
        cd $TF_ROOT
        echo "üîç Determining Kubernetes version for consistent state..."
        
        # First try to get version from existing cluster
        CLUSTER_VERSION=""
        CLUSTER_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" \
          "https://api.digitalocean.com/v2/kubernetes/clusters" | \
          jq -r '.kubernetes_clusters[] | select(.name=="gitlab-cluster") | .version')
        
        if [ -n "$CLUSTER_ID" ] && [ "$CLUSTER_ID" != "null" ]; then
          echo "üéØ Found cluster version from DigitalOcean: $CLUSTER_ID"
          SELECTED_VERSION=$CLUSTER_ID
        else
          echo "‚ö†Ô∏è No cluster found, using default version from variables.tf"
          # Fallback to default from variables.tf
          DEFAULT_VERSION=$(grep 'default.*=' terraform/variables.tf | grep -o '"[^"]*"' | tr -d '"')
          echo "üì¶ Default version: $DEFAULT_VERSION"
          SELECTED_VERSION=$DEFAULT_VERSION
        fi
        
        # Ensure we have a version
        if [ -z "$SELECTED_VERSION" ] || [ "$SELECTED_VERSION" = "null" ]; then
          echo "‚ùå Could not determine version, using fallback"
          SELECTED_VERSION="1.31.3-do.1"
        fi
        
        echo "TF_VAR_k8s_version=$SELECTED_VERSION" >> $GITHUB_ENV
        echo "üìå Using Kubernetes version: $SELECTED_VERSION"
    
    - name: Terraform Init
      run: |
        cd $TF_ROOT
        terraform init
      env:
        TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Import Cluster if Needed
      run: |
        cd $TF_ROOT
        echo "üîç Checking Terraform state and cluster existence..."
        
        # Check if cluster exists in Terraform state
        if terraform state list | grep -q "digitalocean_kubernetes_cluster.main"; then
          echo "‚úÖ Cluster found in Terraform state"
        else
          echo "‚ö†Ô∏è Cluster not found in Terraform state, checking DigitalOcean..."
          
          # Check if cluster exists in DigitalOcean
          CLUSTER_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" \
            "https://api.digitalocean.com/v2/kubernetes/clusters" | \
            jq -r '.kubernetes_clusters[] | select(.name=="gitlab-cluster") | .id')
          
          if [ -n "$CLUSTER_ID" ] && [ "$CLUSTER_ID" != "null" ]; then
            echo "üì• Found existing cluster in DigitalOcean: $CLUSTER_ID"
            echo "üîÑ Importing cluster into Terraform state..."
            terraform import digitalocean_kubernetes_cluster.main $CLUSTER_ID
            echo "‚úÖ Import completed"
          else
            echo "‚ÑπÔ∏è No cluster named 'gitlab-cluster' found in DigitalOcean"
            echo "‚úÖ Nothing to destroy"
          fi
        fi
      env:
        TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Show Infrastructure to be Destroyed
      run: |
        cd $TF_ROOT
        echo "üîç Infrastructure that will be DESTROYED:"
        echo "=========================================="
        terraform plan -destroy -no-color || echo "‚ÑπÔ∏è No infrastructure found to destroy"
        echo "=========================================="
      env:
        TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Destroy Infrastructure
      run: |
        cd $TF_ROOT
        echo "üí• DESTROYING infrastructure..."
        
        # Check if there's anything to destroy
        if terraform state list | grep -q "digitalocean_kubernetes_cluster.main"; then
          terraform destroy -auto-approve
          echo "‚úÖ Infrastructure destroyed successfully"
        else
          echo "‚ÑπÔ∏è No infrastructure found in Terraform state"
          echo "üîç Checking for orphaned resources in DigitalOcean..."
          
          # Try to destroy cluster directly via API if it exists
          CLUSTER_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" \
            "https://api.digitalocean.com/v2/kubernetes/clusters" | \
            jq -r '.kubernetes_clusters[] | select(.name=="gitlab-cluster") | .id')
          
          if [ -n "$CLUSTER_ID" ] && [ "$CLUSTER_ID" != "null" ]; then
            echo "üóëÔ∏è Found orphaned cluster, deleting via API..."
            curl -X DELETE \
              -H "Authorization: Bearer ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" \
              "https://api.digitalocean.com/v2/kubernetes/clusters/$CLUSTER_ID"
            echo "‚úÖ Orphaned cluster deleted"
          else
            echo "‚úÖ No orphaned resources found"
          fi
        fi
      env:
        TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Clean up Repository Variables
      run: |
        echo "üßπ Cleaning up stored kubeconfig..."
        curl -X DELETE \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "${{ github.api_url }}/repos/${{ github.repository }}/actions/variables/KUBECONFIG_B64" || echo "Variable already deleted or doesn't exist"
        echo "‚úÖ Cleanup completed"

  confirmation_failed:
    name: Destroy Confirmation Failed
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_destroy != 'DESTROY'
    
    steps:
    - name: Show Confirmation Error
      run: |
        echo "‚ùå DESTROY CANCELLED"
        echo "You entered: '${{ github.event.inputs.confirm_destroy }}'"
        echo "Required: 'DESTROY'"
        echo ""
        echo "To destroy infrastructure, you must type exactly: DESTROY"
        exit 1